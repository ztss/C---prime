6.1 函数基础
   1.我们通过调用运算符来执行函数，调用运算符的形式是一对圆括号，作用于一个表达式，这个
   表达式是函数或者也可以是指向函数的指针；圆括号内部是用逗号隔开的实参列表。
   2.函数的调用分两步：首先实参初始化函数对应的形参，然后将控制权转交给被调用函数。此时
   主调函数被暂时中断，被调用函数开始执行。
   3.函数的返回类型不能是数组或者函数类型，但是可以返回指向数组或者函数的指针。
6.1.1 局部对象
   1.局部静态对象在程序的执行路径第一次经过对象定义语句时初始化，直到程序终止才被销毁，
   此对象所在的函数即使结束执行也不会对局部静态变量有影响。
6.1.2 函数声明
   1.函数也必须在使用之前声明，根据我们之前所说的，变量应该在头文件中声明，然后在源文件
   中定义，函数与之相同。所以定义函数的源文件应该把包含函数声明的头文件包含进来，然后编
   译器验证函数的声明与定义是否匹配。
6.1.3 分离式编译
   1.分离式编译允许我们把程序分割到几个文件中，每个文件单独编译。之所以使用分离式编译，
   因为当我们修改了一个源文件，只要重新编译那个改动的文件就可以了。可以节省很多时间，
   编译器会负责把对象文件链接到一起形成可执行文件。
6.2.1 传值参数
   1.当用指针作为形参的时候，给函数传递的是指针的副本，所以函数不会改变指针的值，但是可
   以改变指针所指对象的值。虽然这样可以达到改变对象的值的目的，但是在C++中，一般不这样
   使用，而是用引用类型的形参来代替指针。
6.2.2 传引用参数
   1.使用引用可以避免拷贝浪费空间时间，特别是对于大的容器。而且如果在函数中无须改变参数
   的值的时候，最好使用常量引用。
   2.可以使用引用类型返回函数的额外信息。比如说要写一个函数，他的作用是看一个字符串中是
   否有特定的字符串。并且还要返回特定字符串出现的次数。即返回两个值，这里可以用两种方法
   ，一种是定义一个struct,然后返回这个struct。另外一种就是传入函数的形参可以多传入一个
   引用类型的值，用来记录字符串出现的次数。
