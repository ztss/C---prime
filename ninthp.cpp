9.1 顺序容器概述
   1.C++新标准库的容器比旧版本快很好，而且性能几乎肯定与最精心优化过的同类数据结构一
     样好，所以C++程序应该使用标准库容器，而不是最原始的数据结构，如内置数组。
   2.尽量使用vector，如果在读取输入的时候需要在中间插入数据，这个时候可以选择向vector
     中添加数据，然后用sort排序。从而避免在中间插入数据。或者如果一定要在中间插入数据，
     可以在输入阶段使用list，然后将list的内容拷贝到一个vector中。
9.2 容器库概览
9.2.1 迭代器
   1.迭代器指begin和end，一个迭代器范围由一对迭代器表示，这个范围通常称为左闭右开区间。
   这是因为使用这种假设有很多方便的特性。只要它们两个构成一个合法的迭代器范围。则如果
   begin和end相等，则范围为空。
   2.list容器的迭代器不支持<运算，只支持递增，递减，!=,==运算。
9.2.2 容器类型成员
9.2.3 begin和end成员
9.2.4 容器定义和初始化
9.2.5 赋值和swap
9.2.6 容器大小操作
9.2.7 关系运算符
9.3.1 向顺序容器添加元素
   1.deque和vector都支持push_back，但是deque还支持push_front，即在头部插入数据。
   2.而在容器中的特定位置添加元素就要用到insert了。
   3.也可以使用emplace操作。emplace操作在容器中直接构造元素，所以传递给emplace函数的
   参数必须与元素类型的构造函数匹配。
9.3.2 访问元素
   1.使用front和back可以分别得到容器首尾两个元素的引用。但是要先判断容器是否为空。
   2.提供快速随机访问的容器如string，vector，deque，array也提供下标运算符。我们可以用
   at成员函数确保下标操作合法。即container.at(2)。如果越界，会抛出out_of_range异常。
9.3.3 删除元素
9.3.4 特殊的forward_list操作
9.3.5 改变容器大小
   1.可以用resize改变容器的大小。
9.3.6 容器操作可能使迭代器失效
9.4 vector对象是如何增长的
   1.管理vector和string类型容量的成员函数，capacity(),可以保存多少元素，reserve(),
   分配至少能容纳多个个元素的内存空间。
9.5 额外的string操作
9.5.1 构造string的其他方法
9.5.2 改变string的其他方法
9.5.3 string搜索操作
9.5.4 compare函数
9.5.5 数值转换
9.6 容器适配器
   1.容器适配器有stack，queue，priority_queue。
